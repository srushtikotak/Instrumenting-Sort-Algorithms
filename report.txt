We are given two sorting algorithms for observation and evaluation of their working.
1)Selection Sort
2)Merge Sort

From what we know, here are the time complexities of both the algorithms in their best case and worst case scenario.

Algorithms          Time Complexity Best          Time Complexity Worst
Selection Sort            O(N^2)                         O(N^2)
Merge sort              O(N LOG(N))                    O(N LOG(N))

From what we can see here in the table:
Selection Sort: It does not have a very good time complexity. 
Merge Sort: It has a pretty decent time complexity.

So from the knowledge available to us, we can safely say that Merge Sort is much better than Selection Sort.

Now lets have a look at the actual statics available to us from the actual implementation of both the algorithms.(The implementation was done on a quad core PC)


Number of elements in the list: 1

Algorithms              N               Seconds                     Comparisons

Selection Sort          1               4.05311584473e-06                   0

Merge sort              1               1.90734863281e-06                   0


Number of elements in the list: 10

Algorithms              N               Seconds                     Comparisons

Selection Sort         10               2.21729278564e-05                  45

Merge sort             10               4.31537628174e-05                  23



Number of elements in the list: 100

Algorithms              N               Seconds                 Comparisons

Selection Sort         100               0.0011830329895               4950
Merge sort             100               0.00050687789917              537


Number of elements in the list: 1000

Algorithms              N              Seconds           Comparisons     

Selection Sort        1000           0.160171508           499500

Merge sort            1000           0.011999842           8725



Number of elements in the list: 10000

Algorithms              N               Seconds           Comparisons     

Selection Sort        10000          16.40714160823         49995000

Merge sort            10000          0.166811000826         120460


Thus, from the above observations we can see a trend in the execution time and the comparisons made by both the sorting algorithms.

Selection Sort: The execution time and the number of comparisons of this algorithm is high compared to merge sort. This can be proved from our knowledge as the time complexity is O(N^2).

Merge Sort: The execution time and the number of comparisons of this algorithm is considerably less than selection sort. This can be proved from our knowledge as the time complexity is O(NLOG(N)).

For N = 10^6:
Selection sort:
Number of comparisons should be around 499995000000.
Number of seconds required to execute would be around 160000.
(Comparisons will increase by 10^2 times and Execution time is increasing by 10^2 times as well)

Merge sort:
Number of comparisons should be around 18673770.
Number of seconds required to execute would be around 16.
(Comparisons will be 1/3*N^2 and Execution time is increasing by 10 times)











